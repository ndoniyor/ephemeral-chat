// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "protos/chat.proto" (package "grpc", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Chat } from "./chat";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { Empty } from "./chat";
import type { Message } from "./chat";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ChatRoomInfo } from "./chat";
import type { ChatUser } from "./chat";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service grpc.Chat
 */
export interface IChatClient {
    /**
     * @generated from protobuf rpc: Connect(grpc.ChatUser) returns (grpc.ChatRoomInfo);
     */
    connect(input: ChatUser, options?: RpcOptions): UnaryCall<ChatUser, ChatRoomInfo>;
    /**
     * @generated from protobuf rpc: Disconnect(grpc.ChatUser) returns (grpc.ChatRoomInfo);
     */
    disconnect(input: ChatUser, options?: RpcOptions): UnaryCall<ChatUser, ChatRoomInfo>;
    /**
     * @generated from protobuf rpc: SendMessage(grpc.Message) returns (grpc.Empty);
     */
    sendMessage(input: Message, options?: RpcOptions): UnaryCall<Message, Empty>;
    /**
     * @generated from protobuf rpc: SubscribeMessages(grpc.ChatUser) returns (stream grpc.Message);
     */
    subscribeMessages(input: ChatUser, options?: RpcOptions): ServerStreamingCall<ChatUser, Message>;
    /**
     * @generated from protobuf rpc: FlushServer(grpc.Empty) returns (grpc.Empty);
     */
    flushServer(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty>;
}
/**
 * @generated from protobuf service grpc.Chat
 */
export class ChatClient implements IChatClient, ServiceInfo {
    typeName = Chat.typeName;
    methods = Chat.methods;
    options = Chat.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Connect(grpc.ChatUser) returns (grpc.ChatRoomInfo);
     */
    connect(input: ChatUser, options?: RpcOptions): UnaryCall<ChatUser, ChatRoomInfo> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChatUser, ChatRoomInfo>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Disconnect(grpc.ChatUser) returns (grpc.ChatRoomInfo);
     */
    disconnect(input: ChatUser, options?: RpcOptions): UnaryCall<ChatUser, ChatRoomInfo> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChatUser, ChatRoomInfo>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendMessage(grpc.Message) returns (grpc.Empty);
     */
    sendMessage(input: Message, options?: RpcOptions): UnaryCall<Message, Empty> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Message, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SubscribeMessages(grpc.ChatUser) returns (stream grpc.Message);
     */
    subscribeMessages(input: ChatUser, options?: RpcOptions): ServerStreamingCall<ChatUser, Message> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChatUser, Message>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FlushServer(grpc.Empty) returns (grpc.Empty);
     */
    flushServer(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Empty>("unary", this._transport, method, opt, input);
    }
}
