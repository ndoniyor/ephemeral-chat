// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "chat.proto" (package "grpc", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message grpc.TimeStamp
 */
export interface TimeStamp {
    /**
     * @generated from protobuf field: int64 seconds = 1;
     */
    seconds: bigint;
}
/**
 * @generated from protobuf message grpc.Message
 */
export interface Message {
    /**
     * @generated from protobuf field: string senderID = 1;
     */
    senderID: string;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * @generated from protobuf field: string conversationID = 3;
     */
    conversationID: string;
    /**
     * @generated from protobuf field: grpc.TimeStamp timestamp = 4;
     */
    timestamp?: TimeStamp;
}
/**
 * @generated from protobuf message grpc.Empty
 */
export interface Empty {
}
/**
 * @generated from protobuf message grpc.ChatRoomInfo
 */
export interface ChatRoomInfo {
    /**
     * @generated from protobuf field: bool isConnected = 1;
     */
    isConnected: boolean;
    /**
     * @generated from protobuf field: string conversationID = 2;
     */
    conversationID: string;
    /**
     * @generated from protobuf field: int32 userLimit = 3;
     */
    userLimit: number;
}
/**
 * @generated from protobuf message grpc.ChatUser
 */
export interface ChatUser {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string conversationID = 2;
     */
    conversationID: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class TimeStamp$Type extends MessageType<TimeStamp> {
    constructor() {
        super("grpc.TimeStamp", [
            { no: 1, name: "seconds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TimeStamp>): TimeStamp {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.seconds = 0n;
        if (value !== undefined)
            reflectionMergePartial<TimeStamp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TimeStamp): TimeStamp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 seconds */ 1:
                    message.seconds = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TimeStamp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 seconds = 1; */
        if (message.seconds !== 0n)
            writer.tag(1, WireType.Varint).int64(message.seconds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message grpc.TimeStamp
 */
export const TimeStamp = new TimeStamp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Message$Type extends MessageType<Message> {
    constructor() {
        super("grpc.Message", [
            { no: 1, name: "senderID", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "conversationID", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "timestamp", kind: "message", T: () => TimeStamp }
        ]);
    }
    create(value?: PartialMessage<Message>): Message {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.senderID = "";
        message.message = "";
        message.conversationID = "";
        if (value !== undefined)
            reflectionMergePartial<Message>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Message): Message {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string senderID */ 1:
                    message.senderID = reader.string();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* string conversationID */ 3:
                    message.conversationID = reader.string();
                    break;
                case /* grpc.TimeStamp timestamp */ 4:
                    message.timestamp = TimeStamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Message, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string senderID = 1; */
        if (message.senderID !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.senderID);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* string conversationID = 3; */
        if (message.conversationID !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.conversationID);
        /* grpc.TimeStamp timestamp = 4; */
        if (message.timestamp)
            TimeStamp.internalBinaryWrite(message.timestamp, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message grpc.Message
 */
export const Message = new Message$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType<Empty> {
    constructor() {
        super("grpc.Empty", []);
    }
    create(value?: PartialMessage<Empty>): Empty {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Empty>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Empty): Empty {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Empty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message grpc.Empty
 */
export const Empty = new Empty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatRoomInfo$Type extends MessageType<ChatRoomInfo> {
    constructor() {
        super("grpc.ChatRoomInfo", [
            { no: 1, name: "isConnected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "conversationID", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "userLimit", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChatRoomInfo>): ChatRoomInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isConnected = false;
        message.conversationID = "";
        message.userLimit = 0;
        if (value !== undefined)
            reflectionMergePartial<ChatRoomInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatRoomInfo): ChatRoomInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool isConnected */ 1:
                    message.isConnected = reader.bool();
                    break;
                case /* string conversationID */ 2:
                    message.conversationID = reader.string();
                    break;
                case /* int32 userLimit */ 3:
                    message.userLimit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatRoomInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool isConnected = 1; */
        if (message.isConnected !== false)
            writer.tag(1, WireType.Varint).bool(message.isConnected);
        /* string conversationID = 2; */
        if (message.conversationID !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.conversationID);
        /* int32 userLimit = 3; */
        if (message.userLimit !== 0)
            writer.tag(3, WireType.Varint).int32(message.userLimit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message grpc.ChatRoomInfo
 */
export const ChatRoomInfo = new ChatRoomInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatUser$Type extends MessageType<ChatUser> {
    constructor() {
        super("grpc.ChatUser", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "conversationID", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatUser>): ChatUser {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.username = "";
        message.conversationID = "";
        if (value !== undefined)
            reflectionMergePartial<ChatUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatUser): ChatUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string conversationID */ 2:
                    message.conversationID = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string conversationID = 2; */
        if (message.conversationID !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.conversationID);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message grpc.ChatUser
 */
export const ChatUser = new ChatUser$Type();
/**
 * @generated ServiceType for protobuf service grpc.Chat
 */
export const Chat = new ServiceType("grpc.Chat", [
    { name: "Connect", options: {}, I: ChatUser, O: ChatRoomInfo },
    { name: "Disconnect", options: {}, I: ChatUser, O: ChatRoomInfo },
    { name: "SendMessage", options: {}, I: Message, O: Empty },
    { name: "SubscribeMessages", serverStreaming: true, options: {}, I: ChatUser, O: Message }
]);
